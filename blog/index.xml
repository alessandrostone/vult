<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Vult by modlfo</title>
    <link>http://modlfo.github.io/vult/blog/</link>
    <description>Recent content in Blogs on Vult by modlfo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 Sep 2016 22:43:03 +0300</lastBuildDate>
    <atom:link href="http://modlfo.github.io/vult/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>LuaJIT as backend for Vult</title>
      <link>http://modlfo.github.io/vult/blog/lua/</link>
      <pubDate>Thu, 08 Sep 2016 22:43:03 +0300</pubDate>
      
      <guid>http://modlfo.github.io/vult/blog/lua/</guid>
      <description>&lt;p&gt;I have been keeping an eye on LuaJIT (&lt;a href=&#34;http://luajit.org&#34;&gt;http://luajit.org&lt;/a&gt;) for some time. It&amp;rsquo;s a very interesting project and I have read very good things about it. Some time ago I made a small benchmark comparing an optimized algorithm written in C++11 against a lazy coded version in OCaml and LuaJIT. In case you are curious here are the results:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Execution Time&lt;/th&gt;
&lt;th&gt;Lines of Code&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;td&gt;0.355 s&lt;/td&gt;
&lt;td&gt;180&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;OCaml&lt;/td&gt;
&lt;td&gt;0.54 s&lt;/td&gt;
&lt;td&gt;63&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LuaJIT&lt;/td&gt;
&lt;td&gt;0.78 s&lt;/td&gt;
&lt;td&gt;85&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Here&amp;rsquo;s a chart that plots the lines of code against the execution time.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;../images/benchmark1.svg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I have to remark again: &lt;em&gt;The OCaml and Lua code were not written with optimization in mind&lt;/em&gt;. My intention was to see how fast they program could go without putting too much effort coding.&lt;/p&gt;

&lt;p&gt;One can see that the C++ code is much larger. On the other hand, the OCaml code is very compact. The main reason was that in OCaml I used algebraic data types which neither Lua or C++ have (&lt;a href=&#34;https://en.wikipedia.org/wiki/Algebraic_data_type&#34;&gt;https://en.wikipedia.org/wiki/Algebraic_data_type&lt;/a&gt;). Therefore, all the complex data types needed to be implemented with classes or tables in the case of Lua.&lt;/p&gt;

&lt;p&gt;Recently I implemented a prototype of code generation Vult -&amp;gt; Lua in order to check if LuaJIT could be used to create a better live coding environment. I took the JavaScript generator and with a few modifications I got Lua support.&lt;/p&gt;

&lt;p&gt;To generate Lua code you need to call Vult as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./vultc.native -luacode code.vult -o code
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to check the performance I took one of the examples I have in Vult and made a test rendering 1000 s of audio. Here are the results:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Execution Time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;C++11&lt;/td&gt;
&lt;td&gt;2.77 s&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LuaJIT&lt;/td&gt;
&lt;td&gt;3.55 s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Here&amp;rsquo;s the graphic view:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;../images/benchmark2.svg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The results are quite promising. The code was pure Lua with exception of the arrays which are implemented using the LuaJIT FFI as &lt;code&gt;double[]&lt;/code&gt;. One important thing to notice is that the LuaJIT performs all operations in &lt;code&gt;double&lt;/code&gt; precision, while the C/C++ uses &lt;code&gt;float&lt;/code&gt;. I&amp;rsquo;m not sure if this has a big impact or not in modern processors.&lt;/p&gt;

&lt;p&gt;As follow up in this topic, I&amp;rsquo;m planning to do more testing to see if I can generate code that is faster in LuaJIT taking advantage of the FFI features. I&amp;rsquo;m gonna try as well to find a nice way of integrating LuaJIT + Vult into a VST or a PD external.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Generating Pure Data and Teensy Audio templates</title>
      <link>http://modlfo.github.io/vult/blog/pd-teensy/</link>
      <pubDate>Wed, 13 Jul 2016 20:10:57 +0200</pubDate>
      
      <guid>http://modlfo.github.io/vult/blog/pd-teensy/</guid>
      <description>&lt;p&gt;As part of the Vult project I have developed a new standalone library: Pla (&lt;a href=&#34;https://modlfo.github.io/pla/&#34;&gt;https://modlfo.github.io/pla/&lt;/a&gt;). Pla is a templating library that is used in Vult to generate code in a simpler way. Thanks to this library I have developed two templates to simplify using Vult:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/modlfo/pd-vult-example&#34;&gt;Pure Data externals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/modlfo/pd-vult-example&#34;&gt;Teensy Audio Library objects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The template for Pure Data is more stable. It supports both, floating-point and fixed-point arithmetics. In addition, the number of inputs and outputs of the &amp;lsquo;external&amp;rsquo; matches the inputs and outputs of the &lt;code&gt;process&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;You can find an example of using it in this repository: &lt;a href=&#34;https://github.com/modlfo/pd-vult-example&#34;&gt;https://github.com/modlfo/pd-vult-example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Exporting of objects for the Teensy Audio Library is only available in fixed-point and (currently) only supports synthesis objects (I have plans to make it as flexible as the PD template).&lt;/p&gt;

&lt;p&gt;Here you can find an example: &lt;a href=&#34;https://github.com/modlfo/teensy-vult-example&#34;&gt;https://github.com/modlfo/teensy-vult-example&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New site for Vult</title>
      <link>http://modlfo.github.io/vult/blog/new-site/</link>
      <pubDate>Tue, 12 Jul 2016 20:21:43 +0200</pubDate>
      
      <guid>http://modlfo.github.io/vult/blog/new-site/</guid>
      <description>&lt;p&gt;I have been working on giving a refresh of the Vult site. The result is what you see now. After trying a few alternatives I settle to use Hugo (&lt;a href=&#34;https://gohugo.io&#34;&gt;https://gohugo.io&lt;/a&gt;). The reason I used Hugo was because I could make it do exactly what I wanted with the help of the documentation.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m very proud that I did the theme of the site from the ground up (that&amp;rsquo;s why is so minimalistic). I also added comments section using Google+, and I hope it works as expected.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>